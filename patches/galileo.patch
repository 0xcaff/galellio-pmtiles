diff -ruN vendor/galileo/galileo/src/control/event_processor.rs vendor/galileo/galileo/src/control/event_processor.rs
--- a/galileo/src/control/event_processor.rs       2025-03-11 19:57:10
+++ b/galileo/src/control/event_processor.rs       2025-03-11 19:44:26
@@ -187,8 +187,11 @@

                 Some(events)
             }
+            RawUserEvent::Zoom(delta) => {
+                Some(vec![UserEvent::Zoom(delta, self.pointer_position)])
+            }
             RawUserEvent::Scroll(delta) => {
-                Some(vec![UserEvent::Scroll(delta, self.get_mouse_event())])
+                Some(vec![UserEvent::Pan(delta, self.pointer_position)])
             }
             RawUserEvent::TouchStart(touch) => {
                 for i in 0..self.touches.len() {
diff -ruN vendor/galileo/galileo/src/control/map.rs vendor/galileo/galileo/src/control/map.rs
--- a/galileo/src/control/map.rs   2025-03-11 19:57:10
+++ b/galileo/src/control/map.rs   2025-03-11 19:47:21
@@ -1,6 +1,6 @@
 use std::time::Duration;

-use galileo_types::cartesian::Vector2;
+use galileo_types::cartesian::{CartesianPoint2d, Point2, Vector2};

 use crate::control::{EventPropagation, MouseButton, UserEvent, UserEventHandler};
 use crate::map::Map;
@@ -64,12 +64,11 @@
                 }
                 _ => EventPropagation::Propagate,
             },
-            UserEvent::Scroll(delta, mouse_event) => {
-                let zoom = self.get_zoom(*delta, map.view().resolution());
-                let target = map
-                    .target_view()
-                    .zoom(zoom, mouse_event.screen_pointer_position);
-                map.animate_to(target, self.parameters.zoom_duration);
+            UserEvent::Pan(delta, ..) => {
+                map.set_view(
+                    map.view()
+                        .translate_by_pixels(Point2::new(0., 0.), Point2::new(delta.x(), delta.y())),
+                );

                 EventPropagation::Stop
             }
diff -ruN vendor/galileo/galileo/src/control/mod.rs vendor/galileo/galileo/src/control/mod.rs
--- a/galileo/src/control/mod.rs   2025-03-11 19:57:10
+++ b/galileo/src/control/mod.rs   2025-03-11 19:37:54
@@ -50,7 +50,8 @@
     PointerMoved(Point2),
     /// Scroll was called (by a mouse wheel or touch pad scrolling). The number is the number of lines that the event
     /// would scroll if it was scrolling a text.
-    Scroll(f64),
+    Scroll(Point2),
+    Zoom(f64),
     /// New touch started.
     TouchStart(TouchEvent),
     /// Existing touch moved.
@@ -88,7 +89,7 @@

     /// Scroll event is called. The number is number of text lines the scroll is requested for. This is then converted
     /// into zoom delta based on [`EventProcessor`] zoom speed configuration.
-    Scroll(f64, MouseEvent),
+    Pan(Point2, Point2),

     /// Zoom is called around a point. This is different from [`UserEvent::Scroll`], as it is not produced by a mouse
     /// but rather by multi-tough gestures. The first parameter is zoom delta value.
diff -ruN vendor/galileo/galileo/src/winit.rs vendor/galileo/galileo/src/winit.rs
--- a/galileo/src/winit.rs        2025-03-11 19:57:10
+++ b/galileo/src/winit.rs 2025-03-11 19:37:54
@@ -38,7 +38,7 @@
                     return None;
                 }

-                Some(RawUserEvent::Scroll(zoom))
+                Some(RawUserEvent::Scroll(Point2::new(0., zoom)))
             }
             WindowEvent::Touch(touch) => match touch.phase {
                 TouchPhase::Started => {
diff -ruN vendor/galileo/galileo-egui/src/egui_map.rs vendor/galileo/galileo-egui/src/egui_map.rs
--- a/galileo-egui/src/egui_map.rs        2025-03-11 19:57:10
+++ b/galileo-egui/src/egui_map.rs 2025-03-11 19:43:03
@@ -68,7 +68,7 @@
 }

 pub struct EguiMapState {
-    map: Map,
+    pub map: Map,
     egui_render_state: RenderState,
     renderer: WgpuRenderer,
     requires_redraw: Arc<AtomicBool>,
@@ -283,14 +283,15 @@
                 Some(RawUserEvent::PointerMoved(pointer_position))
             }
             Event::MouseWheel { delta, .. } => {
-                let zoom = delta[1] as f64;
-                if zoom.abs() < 0.0001 {
+                if delta.length() < 0.0001 {
                     return None;
                 }

-                Some(RawUserEvent::Scroll(zoom))
+                Some(RawUserEvent::Scroll(Point2::new(delta.x as _, delta.y as _)))
             }
-
+            Event::Zoom(delta) => {
+                Some(RawUserEvent::Zoom((*delta as f64).recip()))
+            }
             _ => None,
         }
     }
